import brain, { INeuralNetworkOptions, IRNNDefaultOptions } from './';

const trainingData = [
  {input: [0, 0], output: [0]},
  {input: [0, 1], output: [1]},
  {input: [1, 0], output: [1]},
  {input: [1, 1], output: [0]}
];

// provide optional config object (or undefined). Defaults shown.
const config: INeuralNetworkOptions = {
  binaryThresh: 0.5,
  hiddenLayers: [3], // array of ints for the sizes of the hidden layers in the network
  activation: 'sigmoid' // supported activation types: ['sigmoid', 'relu', 'leaky-relu', 'tanh'],
};

// create a simple feed-forward neural network with backpropagation
const weakNN = new brain.NeuralNetwork(config);

weakNN.train();

const weakOutput = weakNN.run([1, 0]); // [0.987]

const medConfig: IRNNDefaultOptions = {
  inputSize: 2, //or
  inputRange: 4, //or 2
  hiddenLayers: [4, 4], //or [4]?
  outputSize: 2, //or 4?
  learningRate: .01,
  decayRate: .999
}

const medNN = new brain.NeuralNetwork(medConfig);

medNN.train(trainingData);

const medOutput = medNN.run([1, 0]);

console.log('weak/med output=', weakOutput, medOutput);
